import express from "express";
import { authenticateToken } from "../middleware/auth.js";
import CodingQuestion from "../models/uploadQuestions.js";
import multer from "multer";
import XLSX from 'xlsx';

const storage = multer.memoryStorage();
const router = express.Router();

const uploadExcel = multer({
Â  storage: storage,
Â  limits: {
Â  Â  fileSize: 10 * 1024 * 1024, // 10MB limit
Â  },
Â  fileFilter: (req, file, cb) => {
Â  Â  const allowedMimeTypes = [
Â  Â  Â  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
Â  Â  Â  "application/vnd.ms-excel"
Â  Â  ];
Â  Â  
Â  Â  const allowedExtensions = ['.xlsx', '.xls'];
Â  Â  const fileExtension = file.originalname.toLowerCase().slice(file.originalname.lastIndexOf('.'));
Â  Â  
Â  Â  if (allowedMimeTypes.includes(file.mimetype) || allowedExtensions.includes(fileExtension)) {
Â  Â  Â  cb(null, true);
Â  Â  } else {
Â  Â  Â  cb(new Error("Only Excel files (.xlsx, .xls) are allowed!"), false);
Â  Â  }
Â  },
});

// ================== PARSE EXCEL AND EXTRACT QUESTIONS ==================
router.post("/parse-excel", authenticateToken, uploadExcel.single("excel"), async (req, res) => { Â 
Â  try {
Â  Â  if (req.user.role !== 'admin') {
Â  Â  Â  return res.status(403).json({ message: 'Unauthorized. Admin access required.' });
Â  Â  }

Â  Â  if (!req.file) {
Â  Â  Â  return res.status(400).json({ message: 'No Excel file uploaded' });
Â  Â  }

Â  Â  console.log('Starting Excel parsing with SheetJS...');
Â  Â  console.log('File info:', {
Â  Â  Â  originalname: req.file.originalname,
Â  Â  Â  mimetype: req.file.mimetype,
Â  Â  Â  size: req.file.size
Â  Â  });

Â  Â  try {
Â  Â  Â  // Parse the Excel file
Â  Â  Â  const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
Â  Â  Â  
Â  Â  Â  // Get the first worksheet
Â  Â  Â  const sheetName = workbook.SheetNames[0];
Â  Â  Â  const worksheet = workbook.Sheets[sheetName];
Â  Â  Â  
Â  Â  Â  console.log(`Processing worksheet: ${sheetName}`);
Â  Â  Â  
Â  Â  Â  // Convert to JSON
Â  Â  Â  const rawData = XLSX.utils.sheet_to_json(worksheet, { 
Â  Â  Â  Â  header: 1, // Use array of arrays format
Â  Â  Â  Â  defval: '' // Default value for empty cells
Â  Â  Â  });
Â  Â  Â  
Â  Â  Â  console.log(`Raw data extracted. Rows: ${rawData.length}`);
Â  Â  Â  
Â  Â  Â  if (rawData.length < 2) {
Â  Â  Â  Â  return res.status(400).json({ 
Â  Â  Â  Â  Â  message: 'Excel file must have at least 2 rows (header + data)' 
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  // Parse questions from the data
Â  Â  Â  const questions = parseQuestionsFromExcel(rawData);
Â  Â  Â  console.log(`Questions parsed: ${questions.length}`);
Â  Â  Â  
Â  Â  Â  res.status(200).json({
Â  Â  Â  Â  message: 'Excel parsed successfully',
Â  Â  Â  Â  questions: questions,
Â  Â  Â  Â  count: questions.length
Â  Â  Â  });
Â  Â  Â  
Â  Â  } catch (parseError) {
Â  Â  Â  console.error('Error parsing Excel file:', parseError);
Â  Â  Â  return res.status(400).json({ 
Â  Â  Â  Â  message: 'Failed to parse Excel file. Please check the format.',
Â  Â  Â  Â  error: parseError.message
Â  Â  Â  });
Â  Â  }
Â  Â  
Â  } catch (error) {
Â  Â  console.error('Error processing Excel:', error);
Â  Â  res.status(500).json({ 
Â  Â  Â  message: error.message || 'Failed to process Excel file',
Â  Â  Â  error: error.message 
Â  Â  });
Â  }
});

// ================== BULK UPLOAD QUESTIONS ==================
router.post("/bulk", authenticateToken, async (req, res) => {
Â  try {
Â  Â  if (req.user.role !== 'admin') {
Â  Â  Â  return res.status(403).json({ message: 'Unauthorized. Admin access required.' });
Â  Â  }

Â  Â  const { questions } = req.body;
Â  Â  
Â  Â  if (!Array.isArray(questions) || questions.length === 0) {
Â  Â  Â  return res.status(400).json({ message: 'No questions provided' });
Â  Â  }

Â  Â  // Validate each question
Â  Â  const validationErrors = [];
Â  Â  for (let i = 0; i < questions.length; i++) {
Â  Â  Â  const q = questions[i];
Â  Â  Â  const errors = [];
Â  Â  Â  
Â  Â  Â  if (!q.questionNumber) errors.push('questionNumber is required');
Â  Â  Â  if (!q.questionName) errors.push('questionName is required');
Â  Â  Â  if (!q.description) errors.push('description is required');
Â  Â  Â  if (!q.difficulty) errors.push('difficulty is required');
Â  Â  Â  if (!q.output) errors.push('output is required');
Â  Â  Â  
Â  Â  Â  if (q.difficulty && !['Easy', 'Medium', 'Hard'].includes(q.difficulty)) {
Â  Â  Â  Â  errors.push('difficulty must be Easy, Medium, or Hard');
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  if (q.questionNumber && (typeof q.questionNumber !== 'number' || q.questionNumber < 1)) {
Â  Â  Â  Â  errors.push('questionNumber must be a positive number');
Â  Â  Â  }

Â  Â  Â  if (errors.length > 0) {
Â  Â  Â  Â  validationErrors.push({
Â  Â  Â  Â  Â  questionIndex: i,
Â  Â  Â  Â  Â  questionNumber: q.questionNumber,
Â  Â  Â  Â  Â  errors: errors
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  }

Â  Â  if (validationErrors.length > 0) {
Â  Â  Â  return res.status(400).json({ 
Â  Â  Â  Â  message: 'Validation failed',
Â  Â  Â  Â  validationErrors: validationErrors
Â  Â  Â  });
Â  Â  }

Â  Â  const result = await CodingQuestion.insertMany(questions, { ordered: false });
Â  Â  
Â  Â  res.status(201).json({
Â  Â  Â  message: 'Questions uploaded successfully',
Â  Â  Â  count: result.length,
Â  Â  Â  questions: result
Â  Â  });
Â  } catch (error) {
Â  Â  console.error('Error uploading questions:', error);
Â  Â  
Â  Â  if (error.name === 'ValidationError') {
Â  Â  Â  return res.status(400).json({ 
Â  Â  Â  Â  message: 'Validation error',
Â  Â  Â  Â  error: error.message 
Â  Â  Â  });
Â  Â  }
Â  Â  
Â  Â  if (error.name === 'MongoBulkWriteError') {
Â  Â  Â  const writeErrors = error.writeErrors || [];
Â  Â  Â  const errorDetails = writeErrors.map(err => ({
Â  Â  Â  Â  index: err.index,
Â  Â  Â  Â  questionNumber: questions[err.index]?.questionNumber,
Â  Â  Â  Â  error: err.errmsg
Â  Â  Â  }));
Â  Â  Â  
Â  Â  Â  return res.status(400).json({ 
Â  Â  Â  Â  message: 'Some questions could not be uploaded',
Â  Â  Â  Â  successful: error.result?.nInserted || 0,
Â  Â  Â  Â  failed: writeErrors.length,
Â  Â  Â  Â  errors: errorDetails
Â  Â  Â  });
Â  Â  }
Â  Â  
Â  Â  res.status(500).json({ 
Â  Â  Â  message: 'Failed to upload questions',
Â  Â  Â  error: error.message 
Â  Â  });
Â  }
});

// ================== EXCEL PARSING FUNCTIONS ==================

function parseQuestionsFromExcel(rawData) {
Â  const questions = [];
Â  const headers = rawData[0]; // First row contains headers
Â  
Â  console.log('Headers found:', headers);
Â  
Â  // Expected column mappings (case-insensitive)
Â  const columnMappings = {
Â  Â  questionNumber: findColumnIndex(headers, ['question number', 'question_number', 'questionNumber', 'number', '#', 'q_no', 'Question no.']),
Â  Â  questionName: findColumnIndex(headers, ['question name', 'question_name', 'questionName', 'name', 'title', 'Question']),
Â  Â  description: findColumnIndex(headers, ['description', 'desc', 'problem', 'problem statement', 'problem_statement']),
Â  Â  difficulty: findColumnIndex(headers, ['difficulty', 'level', 'diff']),
Â  Â  output: findColumnIndex(headers, ['output', 'expected output', 'expected_output', 'result', 'answer'])
Â  };
Â  
Â  console.log('Column mappings:', columnMappings);
Â  
Â  // Validate that all required columns are found
Â  const missingColumns = [];
Â  Object.entries(columnMappings).forEach(([key, index]) => {
Â  Â  if (index === -1) {
Â  Â  Â  missingColumns.push(key);
Â  Â  }
Â  });
Â  
Â  if (missingColumns.length > 0) {
Â  Â  throw new Error(`Missing required columns: ${missingColumns.join(', ')}. Please ensure your Excel file has the correct headers.`);
Â  }
Â  
Â  // Process data rows (skip header row)
Â  for (let i = 1; i < rawData.length; i++) {
Â  Â  const row = rawData[i];
Â  Â  
Â  Â  // Skip empty rows
Â  Â  if (!row || row.every(cell => !cell || cell.toString().trim() === '')) {
Â  Â  Â  console.log(`Skipping empty row ${i + 1}`);
Â  Â  Â  continue;
Â  Â  }
Â  Â  
Â  Â  try {
Â  Â  Â  const question = {
Â  Â  Â  Â  questionNumber: parseQuestionNumber(row[columnMappings.questionNumber]),
Â  Â  Â  Â  questionName: cleanString(row[columnMappings.questionName]),
Â  Â  Â  Â  description: cleanString(row[columnMappings.description]),
Â  Â  Â  Â  difficulty: normalizeDifficulty(cleanString(row[columnMappings.difficulty])),
Â  Â  Â  Â  output: cleanString(row[columnMappings.output]),
Â  Â  Â  Â  constraints: "",
Â  Â  Â  Â  examples: [],
Â  Â  Â  Â  tags: []
Â  Â  Â  };
Â  Â  Â  
Â  Â  Â  // Validate the question
Â  Â  Â  const validationErrors = validateQuestion(question, i + 1);
Â  Â  Â  if (validationErrors.length > 0) {
Â  Â  Â  Â  console.warn(`Row ${i + 1} validation errors:`, validationErrors);
Â  Â  Â  Â  continue; // Skip invalid questions
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  questions.push(question);
Â  Â  Â  console.log(`âœ… Parsed Q${question.questionNumber}: ${question.questionName.substring(0, 30)}...`);
Â  Â  Â  
Â  Â  } catch (error) {
Â  Â  Â  console.error(`Error parsing row ${i + 1}:`, error.message);
Â  Â  Â  continue; // Skip problematic rows
Â  Â  }
Â  }
Â  
Â  // Sort questions by question number
Â  questions.sort((a, b) => a.questionNumber - b.questionNumber);
Â  
Â  console.log(`ðŸŽ‰ Total valid questions parsed: ${questions.length}`);
Â  return questions;
}

function findColumnIndex(headers, possibleNames) {
Â  for (const name of possibleNames) {
Â  Â  const index = headers.findIndex(header => 
Â  Â  Â  header && header.toString().toLowerCase().trim() === name.toLowerCase()
Â  Â  );
Â  Â  if (index !== -1) {
Â  Â  Â  return index;
Â  Â  }
Â  }
Â  return -1;
}

function parseQuestionNumber(value) {
Â  if (value === null || value === undefined || value === '') {
Â  Â  throw new Error('Question number is required');
Â  }
Â  
Â  const num = parseInt(value);
Â  if (isNaN(num) || num < 1) {
Â  Â  throw new Error('Question number must be a positive integer');
Â  }
Â  
Â  return num;
}

function cleanString(value) {
Â  if (value === null || value === undefined) {
Â  Â  return '';
Â  }
Â  
Â  return value.toString().trim();
}

function normalizeDifficulty(difficulty) {
Â  if (!difficulty) {
Â  Â  throw new Error('Difficulty is required');
Â  }
Â  
Â  const normalized = difficulty.toLowerCase();
Â  
Â  if (normalized === 'easy' || normalized === 'e') {
Â  Â  return 'Easy';
Â  } else if (normalized === 'medium' || normalized === 'med' || normalized === 'm') {
Â  Â  return 'Medium';
Â  } else if (normalized === 'hard' || normalized === 'difficult' || normalized === 'diff' || normalized === 'h') {
Â  Â  return 'Hard';
Â  } else {
Â  Â  throw new Error(`Invalid difficulty: ${difficulty}. Must be Easy, Medium, or Hard`);
Â  }
}

function validateQuestion(question, rowNumber) {
Â  const errors = [];
Â  
Â  if (!question.questionNumber || question.questionNumber < 1) {
Â  Â  errors.push('Invalid question number');
Â  }
Â  
Â  if (!question.questionName || question.questionName.trim() === '') {
Â  Â  errors.push('Question name is required');
Â  }
Â  
Â  if (!question.description || question.description.trim() === '') {
Â  Â  errors.push('Description is required');
Â  }
Â  
Â  if (!question.difficulty || !['Easy', 'Medium', 'Hard'].includes(question.difficulty)) {
Â  Â  errors.push('Valid difficulty is required (Easy/Medium/Hard)');
Â  }
Â  
Â  if (!question.output || question.output.trim() === '') {
Â  Â  errors.push('Output specification is required');
Â  }
Â  
Â  return errors;
}

router.get("/", authenticateToken, async (req, res) => {
Â  try {
Â  Â  // Ensure only admins can fetch all questions
Â  Â  if (req.user.role !== 'admin') {
Â  Â  Â  return res.status(403).json({ message: 'Unauthorized. Admin access required.' });
Â  Â  }

Â  Â  // Fetch all questions from the database, sorted by questionNumber
Â  Â  const questions = await CodingQuestion.find().sort({ questionNumber: 1 });
Â  Â  
Â  Â  // Respond with the questions
Â  Â  res.status(200).json(questions);
Â  } catch (error) {
Â  Â  console.error('Error fetching questions:', error);
Â  Â  res.status(500).json({ 
Â  Â  Â  message: 'Failed to fetch questions',
Â  Â  Â  error: error.message 
Â  Â  });
Â  }
});

export default router;